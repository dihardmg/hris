### =====================================================
### BUSINESS TRAVEL REQUEST VALIDATION TEST SUITE
### =====================================================
### Testing all validation scenarios for submitBusinessTravel endpoint

@hostname = localhost:8081
@baseUrl = http://{{hostname}}
@token = eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJtY3JkaWtAZ21haWwuY29tIiwiZW1wbG95ZWVJZCI6NDE0NiwiZW1wbG95ZWVDb2RlIjoiRU1QNjcxMzkiLCJ0aW1lem9uZSI6IkFzaWEvSmFrYXJ0YSIsImlhdCI6MTc2MDA3NDU1OCwiZXhwIjoxNzYwMTYwOTU4fQ.c9mclAqTTnApRAjZMCA7HnJCHeDdAVeUygpU57NIajqdxM0cnfB3H94egOtkPf9F5d88zWzMil808QW_ZqVUFA

### =====================================================
### 1. VALIDATION TESTS - REQUIRED FIELDS
### =====================================================

### @name testAllFieldsNull
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": "",
  "startDate": "",
  "endDate": "",
  "reason": "Business trip to meet clients"
}

> {%
  client.test("All fields null validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.code === "400", "Expected code: 400");
    client.assert(response.body.status === "BAD_REQUEST", "Expected status: BAD_REQUEST");
    client.assert(response.body.errors.cityId != null, "Expected cityId errors");
    client.assert(response.body.errors.startDate != null, "Expected startDate errors");
    client.assert(response.body.errors.endDate != null, "Expected endDate errors");

    // Check specific error messages
    client.assert(response.body.errors.cityId.includes("must be not null"), "Expected 'must be not null' error for cityId");
    client.assert(response.body.errors.startDate.includes("format not valid e.g 2025-10-11"), "Expected 'format not valid' error for startDate");
    client.assert(response.body.errors.endDate.includes("format not valid e.g 2025-10-11"), "Expected 'format not valid' error for endDate");

    // Log response for debugging
    client.log("Response structure: " + JSON.stringify(response.body, null, 2));
  });
%}

### @name testCityIdMissing
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "startDate": "2025-12-29",
  "endDate": "2025-12-30",
  "reason": "Test without cityId"
}

> {%
  client.test("Missing cityId validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.cityId != null, "Expected cityId errors");
    client.assert(response.body.errors.cityId.includes("must be not null"), "Expected null validation error");
  });
%}

### @name testDatesMissing
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 1,
  "reason": "Test without dates"
}

> {%
  client.test("Missing dates validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.startDate != null, "Expected startDate errors");
    client.assert(response.body.errors.endDate != null, "Expected endDate errors");
    client.assert(response.body.errors.startDate.includes("must be not null"), "Expected null validation error");
  });
%}

### =====================================================
### 2. VALIDATION TESTS - INVALID VALUES
### =====================================================

### @name testNegativeCityId
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": -1,
  "startDate": "2025-12-29",
  "endDate": "2025-12-30",
  "reason": "Test with negative cityId"
}

> {%
  client.test("Negative cityId validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.cityId != null, "Expected cityId errors");
    client.assert(response.body.errors.cityId.includes("only number int"), "Expected positive number validation error");
  });
%}

### @name testZeroCityId
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 0,
  "startDate": "2025-12-29",
  "endDate": "2025-12-30",
  "reason": "Test with zero cityId"
}

> {%
  client.test("Zero cityId validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.cityId != null, "Expected cityId errors");
    client.assert(response.body.errors.cityId.includes("only number int"), "Expected positive number validation error");
  });
%}

### @name testInvalidDateFormat
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 1,
  "startDate": "2025/12/29",
  "endDate": "2025-12-30",
  "reason": "Test with invalid date format"
}

> {%
  client.test("Invalid date format validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.startDate != null, "Expected startDate errors");
    client.assert(response.body.errors.startDate.includes("format not valid e.g 2025-10-11"), "Expected date format validation error");
  });
%}

### @name testMalformedDate
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 1,
  "startDate": "2025-13-45",
  "endDate": "2025-12-30",
  "reason": "Test with malformed date"
}

> {%
  client.test("Malformed date validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.startDate != null, "Expected startDate errors");
    client.assert(response.body.errors.startDate.includes("format not valid e.g 2025-10-11"), "Expected malformed date validation error");
  });
%}

### @name testPastDate
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 1,
  "startDate": "2020-01-01",
  "endDate": "2020-01-02",
  "reason": "Test with past date"
}

> {%
  client.test("Past date validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.startDate != null, "Expected startDate errors");
    client.assert(response.body.errors.startDate.includes("must be today or future date"), "Expected past date validation error");
  });
%}

### =====================================================
### 3. BUSINESS LOGIC VALIDATION TESTS
### =====================================================

### @name testEndDateBeforeStartDate
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 1,
  "startDate": "2025-12-30",
  "endDate": "2025-12-29",
  "reason": "Test with end date before start date"
}

> {%
  client.test("End date before start date validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.endDate != null, "Expected endDate errors");
    client.assert(response.body.errors.endDate.includes("must be after start date"), "Expected date comparison validation error");
  });
%}

### @name testExcessiveTravelPeriod
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 1,
  "startDate": "2025-01-01",
  "endDate": "2026-01-02",
  "reason": "Test with excessive travel period"
}

> {%
  client.test("Excessive travel period validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.endDate != null, "Expected endDate errors");
    client.assert(response.body.errors.endDate.includes("travel period cannot exceed 365 days"), "Expected excessive period validation error");
  });
%}

### =====================================================
### 4. MULTIPLE VALIDATION ERRORS TEST
### =====================================================

### @name testMultipleValidationErrors
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": -5,
  "startDate": "1990-01-01",
  "endDate": "1990-01-01",
  "reason": "Test multiple validation errors"
}

> {%
  client.test("Multiple validation errors", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");
    client.assert(response.body.errors.cityId != null, "Expected cityId errors");
    client.assert(response.body.errors.startDate != null, "Expected startDate errors");
    client.assert(response.body.errors.endDate != null, "Expected endDate errors");
    client.assert(Object.keys(response.body.errors).length >= 3, "Expected multiple field errors");

    // Check specific error messages for multiple errors
    client.assert(response.body.errors.cityId.includes("only number int"), "Expected 'only number int' error for negative cityId");
    client.assert(response.body.errors.startDate.length >= 2, "Expected multiple errors for startDate");
    client.assert(response.body.errors.endDate.length >= 2, "Expected multiple errors for endDate");
  });
%}

### =====================================================
### 5. VALID REQUEST (SUCCESS CASE)
### =====================================================

### @name testValidRequest
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": 1,
  "startDate": "2025-10-19",
  "endDate": "2025-10-20",
  "reason": "Business trip to meet clients and attend conference"
}

> {%
  client.test("Valid request should succeed", function() {
    client.assert(response.status === 201, "Expected 201 Created for valid request");
    client.assert(response.body.success === true, "Expected success: true");
    client.assert(response.body.data != null, "Expected data in response");
  });
%}

### @name testResponseFormatStructure
POST {{baseUrl}}/api/business-travel/request
Content-Type: application/json
Authorization: Bearer {{token}}

{
  "cityId": "",
  "startDate": "2025",
  "endDate": "2025-10",
  "reason": "Business trip - meeting clients"
}

> {%
  client.test("Response format structure validation", function() {
    client.assert(response.status === 400, "Expected 400 Bad Request");

    // Check exact response structure
    client.assert(response.body.hasOwnProperty("code"), "Response should have 'code' field");
    client.assert(response.body.hasOwnProperty("status"), "Response should have 'status' field");
    client.assert(response.body.hasOwnProperty("errors"), "Response should have 'errors' field");

    // Check exact values
    client.assert(response.body.code === "400", "Code should be exactly '400'");
    client.assert(response.body.status === "BAD_REQUEST", "Status should be exactly 'BAD_REQUEST'");

    // Check errors structure - should be arrays
    client.assert(Array.isArray(response.body.errors.cityId), "cityId errors should be an array");
    client.assert(Array.isArray(response.body.errors.startDate), "startDate errors should be an array");
    client.assert(Array.isArray(response.body.errors.endDate), "endDate errors should be an array");

    // Check specific error messages for this test case
    client.assert(response.body.errors.cityId.includes("must be not null"), "Should have 'must be not null' error for cityId");
    client.assert(response.body.errors.startDate.includes("format not valid e.g 2025-10-11"), "Should have 'format not valid' error for startDate");
    client.assert(response.body.errors.endDate.includes("format not valid e.g 2025-10-11"), "Should have 'format not valid' error for endDate");

    // Check for correct field order
    var responseString = JSON.stringify(response.body, null, 2);
    var lines = responseString.split('\n');
    var codeIndex = -1;
    var statusIndex = -1;
    var errorsIndex = -1;

    for (var i = 0; i < lines.length; i++) {
        if (lines[i].trim().startsWith('"code"')) codeIndex = i;
        if (lines[i].trim().startsWith('"status"')) statusIndex = i;
        if (lines[i].trim().startsWith('"errors"')) errorsIndex = i;
    }

    client.assert(codeIndex < statusIndex && statusIndex < errorsIndex,
        "Field order should be: code, status, errors (found: code at " + codeIndex + ", status at " + statusIndex + ", errors at " + errorsIndex + ")");

    // Check for correct JSON syntax (no missing commas)
    client.assert(!responseString.includes('"BAD_REQUEST" "errors"'), "Response should have proper JSON syntax with comma after status");

    // Log response for debugging
    client.log("Response structure: " + responseString);
  });
%}

### =====================================================
### VALIDATION TEST SUMMARY
### =====================================================
#
# This test suite validates:
#
# ✅ Required field validation (cityId, startDate, endDate)
# ✅ Positive integer validation for cityId
# ✅ Date format validation (YYYY-MM-DD)
# ✅ Past date validation
# ✅ Date comparison logic (endDate must be >= startDate)
# ✅ Maximum travel period validation (<= 365 days)
# ✅ Multiple validation errors handling
# ✅ Correct error response format with code, status, and errors array
# ✅ Success case with valid data
#
# Error Response Format:
# {
#   "code": "400",
#   "status": "BAD_REQUEST",
#   "errors": {
#     "cityId": ["must be not null", "only number int"],
#     "startDate": ["must be not null", "format YYYY-MM-DD"],
#     "endDate": ["must be not null", "format YYYY-MM-DD"]
#   }
# }
#
### =====================================================